/*
** piped.c for  in /home/lenoir/PSU_2016_42sh
** 
** Made by LENOIR
** Login   <guillaume.lenoir@epitech.eu>
** 
** Started on  Mon May 15 06:06:41 2017 LENOIR
** Last update Mon May 15 09:33:31 2017 LENOIR
*/

#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>
#include "mysh.h"

int	exec_biin(char *path, char **args ,char **env)
{

  if (execve(path, args, env) == BREAK)
    return (BREAK);
  return (SUCCES);
}

int	exec_biinaire(char **tab, t_sh *sh, t_cmd cmd)
{
  int	i;
  char	*path;
  char	**bin_path;
  char	*env_line;

  i = 0;
  if ((env_line = get_env_var(sh->env_list, "PATH")) == NULL)
    return (BREAK);
  if ((bin_path = my_str_to_wordtab(env_line, ':')) == NULL)
    return (BREAK);
  while (bin_path[i])
    {
      path = my_strlcat("", bin_path[i]);
      path = my_strlcat(path, "/");
      path = my_strlcat(path, tab[0]);
      if (access(path, F_OK | X_OK) == 0)
	{
	  exec_biin(path, tab, env_tab(sh->env_list, 0));
	  return (SUCCES);
	}
      free(path);
      i++;
    }
  return (BREAK);
}


int	p_exec(t_cmd cmd, t_sh *sh)
{
  if ((cmd.tab = my_str_to_wordtab(cmd.cmd, ' ')) == NULL)
    return (0);
  /*if (fd != 1)
    dup2(fd, 1);*/
  else if (my_strcmp(cmd.tab[0], "exit"))
    {
      if (cmd.tab[1] && my_is_digit(cmd.tab[1]))
	my_exit(my_getnbr(cmd.tab[1]));
      my_exit(84);
    }
  else if (my_strcmp(cmd.tab[0], "cd"))
    cd_command(cmd, sh);
  else if (my_strcmp(cmd.tab[0], "pwd"))
    my_printf("%s\n", getcwd(NULL, 0));
  else if (my_strcmp(cmd.tab[0], "env"))
    draw_env(sh->env_list);
  else if (my_strcmp(cmd.tab[0], "setenv"))
    draw_env(sh->env_list);
  else if (exec_biinaire(cmd.tab, sh, cmd) == SUCCES);
  else if (my_strcmp(cmd.tab[0], "unsetenv"))
    draw_env(sh->env_list);
  else if ((cmd.tab[0][0] == '.' || cmd.tab[0][0] == '/') &&
	   access(cmd.tab[0], F_OK | X_OK) == 0)
    exec_biin(cmd.tab[0], cmd.tab, env_tab(sh->env_list, 0));
}

int	piped_exec(t_cmd cmd, t_sh *sh)
{
  char	**tab;
  int	p[2];
  int	i;
  pid_t	pid;
  t_cmd	amd;
  
  i = 0;
  if ((tab = my_str_to_wordtab(cmd.cmd, '|')) == NULL)
    return (0);
  while (i < count_char(cmd.cmd, '|'))
    {
      printf("tab : %s\n", tab[i]);
      pipe(p);
      pid = fork();
      if (pid)
	{
	  close(p[0]);
	  dup2(p[1], 1);
	  amd.cmd = tab[i];
	  p_exec(amd, sh);
	  write(2, "ok\n", 3);
	}
      i++;
      close(p[1]);
      dup2(p[0], 0);
    }
  char buf[500];
  int l = read(p[0],buf, 450);
  buf[l] = 0;
  write(2, buf, l + 1);
  /*amd.cmd = tab[i];
    p_exec(cmd, sh);*/	  
}
